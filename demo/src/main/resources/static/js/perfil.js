AOS.init();

const editBtn = document.getElementById("edit-btn");
const saveBtn = document.getElementById("save-btn");
const nomeInput = document.getElementById("nome");
const profissaoInput = document.getElementById("profissao");
const cpfInput = document.getElementById("cpf"); // Hidden CPF input
const avatarUpload = document.getElementById("avatar-upload");
const uploadAvatarBtn = document.getElementById("upload-avatar-btn");
const avatarImg = document.getElementById("avatar-img");

// List containers
const formacaoAcademicaList = document.getElementById("formacaoAcademicaList");
const experienciaProfissionalList = document.getElementById("experienciaProfissionalList");
const areasInteresseList = document.getElementById("areasInteresseList");
const idiomasList = document.getElementById("idiomasList");
const participacoesList = document.getElementById("participacoesList");
const projetosDestacadosList = document.getElementById("projetosDestacadosList");

// Add buttons for dynamic lists
const addFormacaoBtn = document.getElementById("add-formacao-btn");
const addExperienciaBtn = document.getElementById("add-experiencia-btn");
const addAreaInteresseBtn = document.getElementById("add-area-interesse-btn");
const addIdiomaBtn = document.getElementById("add-idioma-btn");
const addParticipacaoBtn = document.getElementById("add-participacao-btn");
const addProjetoBtn = document.getElementById("add-projeto-btn");
const addSkillBtn = document.getElementById("add-skill-btn"); // New button for skills

const objetivosProfissionaisTextarea = document.getElementById("objetivosProfissionais");
const experienciaAcademicaTextarea = document.getElementById("experienciaAcademica");
const linkedinInput = document.getElementById("linkedin");
const githubInput = document.getElementById("github");
const portfolioInput = document.getElementById("portfolio");

const skillsEditSection = document.getElementById("skills-edit");
let skillsChart; // Chart.js instance

// --- Profile Data Loading and Saving ---

async function fetchProfileData() {
  try {
    const response = await fetch('http://localhost:8080/perfil/dados'); // Endpoint to get profile data
    if (!response.ok) {
      if (response.status === 401) {
        window.location.href = '/login'; // Redirect if not authenticated
        return;
      }
      throw new Error(`HTTP error! status: ${response.status}`);
    }
    const data = await response.json();

    if (data.sucesso && data.perfil) {
      populateProfile(data.perfil);
    } else {
      console.error('Failed to load profile:', data.erro);
      // If profile not found for a new user, populate with defaults or empty values
      populateProfile({
        cpf: data.perfil ? data.perfil.cpf : '', // Use CPF from response if available, else empty
        nome: '', profissao: '', formacaoAcademica: [], experienciaProfissional: [],
        habilidades: {}, areasInteresse: [], objetivosProfissionais: '',
        experienciaAcademica: '', idiomas: [], participacoes: [],
        projetosDestacados: [], linkedin: '', github: '', portfolio: ''
      });
    }
  } catch (error) {
    console.error('Error fetching profile data:', error);
    mostrarNotificacao("Erro ao conectar com o servidor para carregar o perfil. ‚ùå", 5000);
  }
}

function populateProfile(perfil) {
  nomeInput.value = perfil.nome || '';
  profissaoInput.value = perfil.profissao || '';
  cpfInput.value = perfil.cpf || ''; // Set hidden CPF

  // Populate dynamic lists (always initially as spans in view mode)
  populateDynamicList(formacaoAcademicaList, perfil.formacaoAcademica, 'li', 'span', '');
  populateDynamicList(experienciaProfissionalList, perfil.experienciaProfissional, 'li', 'span', '');
  populateDynamicList(areasInteresseList, perfil.areasInteresse, 'div', 'span', 'px-3 py-1 bg-gray-100 rounded-full');
  populateDynamicList(idiomasList, perfil.idiomas, 'li', 'span', 'bg-gray-100 p-2 rounded mb-3 block');
  populateDynamicList(participacoesList, perfil.participacoes, 'li', 'span', 'bg-gray-100 p-2 rounded mb-3 block');
  populateDynamicList(projetosDestacadosList, perfil.projetosDestacados, 'li', 'span', 'bg-gray-100 p-2 rounded');


  // Populate textareas
  objetivosProfissionaisTextarea.value = perfil.objetivosProfissionais || '';
  experienciaAcademicaTextarea.value = perfil.experienciaAcademica || '';

  // Populate links
  linkedinInput.value = perfil.linkedin || '';
  githubInput.value = perfil.github || '';
  portfolioInput.value = perfil.portfolio || '';

  // Populate skills chart and edit section
  // THIS IS THE FIX FOR "NOT GRABBING INFO"
  if (perfil.habilidades) {
    const labels = Object.keys(perfil.habilidades);
    const data = Object.values(perfil.habilidades);
    updateSkillsChart(labels, data);
    updateSkillsEditSection(perfil.habilidades); // This populates the edit fields
  } else {
      updateSkillsChart([], []); // Clear chart if no skills
      updateSkillsEditSection({}); // Clear edit section if no skills
  }


  // Handle avatar (if base64 string is stored)
  if (perfil.avatar) {
    avatarImg.src = perfil.avatar;
  }
}


/**
 * Generic function to populate dynamic lists with items.
 * @param {HTMLElement} container The parent element (e.g., ul, div)
 * @param {Array<string>} dataArray The array of strings to populate.
 * @param {string} wrapperTag 'li' or 'div' for the wrapper element.
 * @param {string} itemTag 'input' or 'span' for the actual content element.
 * @param {string} itemClassName CSS classes for the item element (span or input).
 */
function populateDynamicList(container, dataArray, wrapperTag, itemTag, itemClassName = '') {
    container.innerHTML = ''; // Clear existing content
    if (dataArray && Array.isArray(dataArray) && dataArray.length > 0) { // Check if dataArray is actually an array
        dataArray.forEach(item => {
            const wrapper = document.createElement(wrapperTag);
            const contentEl = document.createElement(itemTag);

            contentEl.textContent = item;
            contentEl.className = itemClassName;
            contentEl.setAttribute('data-editable-content', 'true'); // Mark as editable content

            wrapper.appendChild(contentEl);
            container.appendChild(wrapper);
        });
    }
}


// --- Edit Mode Toggling ---

function toggleEditMode(enable) {
  // Toggle readOnly for main input fields and textareas
  document.querySelectorAll('input:not(#avatar-upload):not([data-editable-list-input]), textarea').forEach(el => {
    el.readOnly = !enable;
    el.classList.toggle('bg-gray-100', !enable);
    el.classList.toggle('border-blue-500', enable);
    el.classList.toggle('border-transparent', !enable);
  });

  // Show/hide specific edit buttons
  uploadAvatarBtn.style.display = enable ? "block" : "none";
  saveBtn.style.display = enable ? "inline-block" : "none";
  editBtn.style.display = enable ? "none" : "inline-block";

  // Toggle visibility of add buttons for dynamic lists
  addFormacaoBtn.classList.toggle('hidden', !enable);
  addExperienciaBtn.classList.toggle('hidden', !enable);
  addAreaInteresseBtn.classList.toggle('hidden', !enable);
  addIdiomaBtn.classList.toggle('hidden', !enable);
  addParticipacaoBtn.classList.toggle('hidden', !enable);
  addProjetoBtn.classList.toggle('hidden', !enable);
  addSkillBtn.classList.toggle('hidden', !enable);

  // Toggle skills edit section visibility
  skillsEditSection.classList.toggle("hidden", !enable);

  // Convert spans to inputs or inputs back to spans for dynamic lists
  const dynamicLists = [
    formacaoAcademicaList, experienciaProfissionalList, areasInteresseList,
    idiomasList, participacoesList, projetosDestacadosList
  ];

  dynamicLists.forEach(list => {
    if (enable) {
      convertSpansToInputsInList(list);
    } else {
      convertInputsToSpansInList(list);
    }
  });

  // If exiting edit mode, ensure chart is updated from current inputs
  if (!enable) {
    updateChartFromInputs();
  }
}

/**
 * Converts `<span>` elements within a list container to editable `<input>` fields.
 * Includes a remove button for each item.
 * @param {HTMLElement} container The list container (e.g., ul, div).
 */
function convertSpansToInputsInList(container) {
    // Select the direct children (e.g., li or div) that contain the content span
    container.querySelectorAll('[data-editable-content="true"]').forEach(contentEl => {
        const wrapper = contentEl.parentElement; // This is the li or div wrapper

        const input = document.createElement('input');
        input.type = 'text';
        input.value = contentEl.textContent.trim();
        input.className = 'w-full p-1 border border-blue-500 rounded mb-1';
        input.setAttribute('data-editable-list-input', 'true'); // Mark as editable list input

        const deleteBtn = document.createElement('button');
        deleteBtn.textContent = 'X';
        deleteBtn.className = 'ml-2 text-red-500 hover:text-red-700 text-sm';
        deleteBtn.type = 'button'; // Prevent form submission
        deleteBtn.onclick = (e) => {
            e.preventDefault();
            wrapper.remove(); // Remove the entire wrapper (li or div)
        };

        // Clear wrapper and append new elements
        wrapper.innerHTML = '';
        wrapper.appendChild(input);
        wrapper.appendChild(deleteBtn);
    });
}

/**
 * Converts editable `<input>` fields within a list container back to `<span>` elements.
 * Removes empty items.
 * @param {HTMLElement} container The list container (e.g., ul, div).
 */
function convertInputsToSpansInList(container) {
    // Select the direct children (e.g., li or div) that contain the input
    const itemsToRemove = [];
    container.querySelectorAll('[data-editable-list-input="true"]').forEach(input => {
        const wrapper = input.parentElement; // This is the li or div wrapper

        if (!input.value.trim()) {
            itemsToRemove.push(wrapper); // Mark for removal if empty
            return;
        }

        const span = document.createElement('span');
        span.textContent = input.value.trim();
        // Re-apply original class names (if applicable, depends on how your CSS works)
        if (container.id === 'areasInteresseList') {
            span.className = 'px-3 py-1 bg-gray-100 rounded-full';
        } else if (container.id === 'idiomasList' || container.id === 'participacoesList' || container.id === 'projetosDestacadosList') {
            span.className = 'bg-gray-100 p-2 rounded mb-3 block';
        } else {
             span.className = 'w-full bg-transparent'; // Default for simple lists
        }
        span.setAttribute('data-editable-content', 'true'); // Mark again for future editing

        wrapper.innerHTML = ''; // Clear wrapper
        wrapper.appendChild(span);
    });

    itemsToRemove.forEach(item => item.remove());
}


/**
 * Adds a new editable item to a dynamic list.
 * @param {HTMLElement} listContainer The parent element (e.g., ul, div)
 * @param {string} itemClassName CSS classes to apply to the input.
 */
function addListItemFromPrompt(listContainer, itemClassName = '') {
    const itemText = prompt("Adicionar novo item:");
    if (itemText) {
        // Determine the wrapper tag based on the list container's tag
        const wrapperTag = (listContainer.tagName === 'UL' || listContainer.tagName === 'OL') ? 'li' : 'div';
        const wrapper = document.createElement(wrapperTag);

        const contentEl = document.createElement('input'); // Always create an input when adding via prompt
        contentEl.type = 'text';
        contentEl.value = itemText;
        contentEl.readOnly = false;
        contentEl.className = 'w-full p-1 border border-blue-500 rounded mb-1'; // Editable style
        if (itemClassName) {
            contentEl.className += ' ' + itemClassName; // Add specific classes if provided
        }
        contentEl.setAttribute('data-editable-list-input', 'true'); // Mark as editable list input

        const deleteBtn = document.createElement('button');
        deleteBtn.textContent = 'X';
        deleteBtn.className = 'ml-2 text-red-500 hover:text-red-700 text-sm';
        deleteBtn.type = 'button'; // Prevent form submission
        deleteBtn.onclick = (e) => { e.preventDefault(); wrapper.remove(); };

        wrapper.appendChild(contentEl);
        wrapper.appendChild(deleteBtn);
        listContainer.appendChild(wrapper);

        contentEl.focus(); // Focus on the newly added input
    }
}


// --- Event Listeners ---

editBtn.addEventListener("click", () => toggleEditMode(true));

saveBtn.addEventListener("click", async () => {
  const profileData = collectProfileData(); // Collect data while inputs are still active
  toggleEditMode(false); // Switch to view mode

  try {
    const response = await fetch('http://localhost:8080/perfil/salvar', { // Ensure absolute URL for fetch
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
      },
      body: JSON.stringify(profileData),
    });

    const result = await response.json();

    if (result.sucesso) {
      mostrarNotificacao("Perfil salvo com sucesso! ‚úÖ");
      // Re-fetch and populate profile to ensure consistent display after save
      // This is crucial as the backend might return normalized data
      fetchProfileData();
    } else {
      mostrarNotificacao(`Erro ao salvar perfil: ${result.mensagem} ‚ùå`, 5000);
      // Revert to edit mode or show specific errors if needed
      toggleEditMode(true); // Allow user to fix errors
    }
  } catch (error) {
    console.error('Erro ao salvar perfil:', error);
    mostrarNotificacao("Erro ao conectar com o servidor para salvar o perfil. ‚ùå", 5000);
    toggleEditMode(true); // Allow user to try again
  }
});

// Helper to collect all profile data from the form
function collectProfileData() {
  const data = {
    cpf: cpfInput.value, // Crucial for backend to identify user
    nome: nomeInput.value,
    profissao: profissaoInput.value,
    formacaoAcademica: collectListItems(formacaoAcademicaList),
    experienciaProfissional: collectListItems(experienciaProfissionalList),
    habilidades: collectSkills(),
    areasInteresse: collectListItems(areasInteresseList),
    objetivosProfissionais: objetivosProfissionaisTextarea.value,
    experienciaAcademica: experienciaAcademicaTextarea.value,
    idiomas: collectListItems(idiomasList),
    participacoes: collectListItems(participacoesList),
    projetosDestacados: collectListItems(projetosDestacadosList),
    linkedin: linkedinInput.value,
    github: githubInput.value,
    portfolio: portfolioInput.value,
    // avatar: avatarImg.src // If you want to save base64 avatar to JSON
  };
  return data;
}

// Helper to collect data from a dynamic list (inputs or spans)
// This function needs to specifically target the editable inputs
function collectListItems(container) {
    const items = [];
    // Collect from inputs first (if in edit mode)
    container.querySelectorAll('[data-editable-list-input="true"]').forEach(inputEl => {
        if (inputEl.value.trim()) {
            items.push(inputEl.value.trim());
        }
    });
    // If no inputs (i.e., in view mode or just loaded), collect from spans
    if (items.length === 0) { // Only do this if no inputs were found
        container.querySelectorAll('[data-editable-content="true"]').forEach(spanEl => {
             if (spanEl.textContent.trim()) {
                 items.push(spanEl.textContent.trim());
             }
        });
    }
    return items;
}

// Helper to collect skills from the edit section
function collectSkills() {
  const skills = {};
  skillsEditSection.querySelectorAll('.flex.space-x-2').forEach(skillRow => {
    const nameInput = skillRow.querySelector('.skill-name');
    const valueInput = skillRow.querySelector('.skill-value');
    if (nameInput && valueInput && nameInput.value.trim()) {
      skills[nameInput.value.trim()] = Number(valueInput.value) || 0;
    }
  });
  return skills;
}


// --- Image Upload ---
uploadAvatarBtn.addEventListener("click", () => avatarUpload.click());
avatarUpload.addEventListener("change", (e) => {
  const file = e.target.files[0];
  if (file) {
    const reader = new FileReader();
    reader.onload = function (e) {
      avatarImg.src = e.target.result;
    };
    reader.readAsDataURL(file);
  }
});

// --- Chart.js Initialization and Update ---
const ctx = document.getElementById("skillsChart").getContext("2d");
function initializeSkillsChart() {
    skillsChart = new Chart(ctx, {
        type: "bar",
        data: {
            labels: [], // Will be populated dynamically
            datasets: [{
                label: "N√≠vel de Profici√™ncia (%)",
                data: [], // Will be populated dynamically
                backgroundColor: [
                    "rgba(59, 130, 246, 0.7)", "rgba(234, 179, 8, 0.7)", "rgba(79, 70, 229, 0.7)",
                    "rgba(220, 38, 38, 0.7)", "rgba(16, 185, 129, 0.7)", "rgba(139, 92, 246, 0.7)",
                    "rgba(0, 150, 136, 0.7)", "rgba(255, 87, 34, 0.7)", "rgba(121, 85, 72, 0.7)" // Added more colors
                ],
                borderRadius: 5,
            }, ],
        },
        options: {
            responsive: true,
            scales: {
                y: { beginAtZero: true, max: 100, ticks: { stepSize: 10 } },
            },
            plugins: { legend: { display: false } },
        },
    });
}

function populateProfile(perfil) {
  nomeInput.value = perfil.nome || ''; // Populates 'nome' input
  profissaoInput.value = perfil.profissao || ''; // Populates 'profissao' input
  cpfInput.value = perfil.cpf || ''; // Populates hidden 'cpf' input

  // Populate dynamic lists (always initially as spans in view mode)
  // These functions iterate through the arrays in perfil and create span elements
  populateDynamicList(formacaoAcademicaList, perfil.formacaoAcademica, 'li', 'span', '');
  populateDynamicList(experienciaProfissionalList, perfil.experienciaProfissional, 'li', 'span', '');
  populateDynamicList(areasInteresseList, perfil.areasInteresse, 'div', 'span', 'px-3 py-1 bg-gray-100 rounded-full');
  populateDynamicList(idiomasList, perfil.idiomas, 'li', 'span', 'bg-gray-100 p-2 rounded mb-3 block');
  populateDynamicList(participacoesList, perfil.participacoes, 'li', 'span', 'bg-gray-100 p-2 rounded mb-3 block');
  populateDynamicList(projetosDestacadosList, perfil.projetosDestacados, 'li', 'span', 'bg-gray-100 p-2 rounded');


  // Populate textareas
  objetivosProfissionaisTextarea.value = perfil.objetivosProfissionais || '';
  experienciaAcademicaTextarea.value = perfil.experienciaAcademica || '';

  // Populate links
  linkedinInput.value = perfil.linkedin || '';
  githubInput.value = perfil.github || '';
  portfolioInput.value = perfil.portfolio || '';

  // Populate skills chart and edit section
  // THIS IS WHERE 'habilidades' are handled
  if (perfil.habilidades && Object.keys(perfil.habilidades).length > 0) { // Check if 'habilidades' exist and are not empty
    const labels = Object.keys(perfil.habilidades);
    const data = Object.values(perfil.habilidades);
    updateSkillsChart(labels, data); // Updates the Chart.js graph
    updateSkillsEditSection(perfil.habilidades); // Populates the hidden edit section inputs
  } else {
      updateSkillsChart([], []); // Clear chart if no skills
      updateSkillsEditSection({}); // Clear edit section if no skills
  }

  // Handle avatar (if base64 string is stored)
  if (perfil.avatar) {
    avatarImg.src = perfil.avatar;
  }
}

initializeSkillsChart(); // Initialize the chart with empty data initially

function updateSkillsChart(labels, data) {
    if (skillsChart) {
        skillsChart.data.labels = labels;
        skillsChart.data.datasets[0].data = data;
        skillsChart.update();
    }
}

// Function to update skills edit section with inputs
function updateSkillsEditSection(skills) {
    skillsEditSection.innerHTML = ''; // Clear existing inputs
    for (const [name, value] of Object.entries(skills)) {
        addSkillInput(name, value);
    }
}

// Function to add a single skill input row
function addSkillInput(name = '', value = 0) {
    const skillRow = document.createElement('div');
    skillRow.className = 'flex space-x-2';
    skillRow.innerHTML = `
        <input type="text" class="skill-name border p-1 rounded w-1/2" value="${name}" />
        <input type="number" class="skill-value border p-1 rounded w-1/2" value="${value}" min="0" max="100" />
        <button class="remove-skill-btn text-red-500 hover:text-red-700 text-sm" type="button">X</button>
    `;
    skillsEditSection.appendChild(skillRow);

    skillRow.querySelector('.remove-skill-btn').onclick = (e) => {
        e.preventDefault();
        skillRow.remove();
        updateChartFromInputs(); // Update chart after removing skill
    };
    // Update chart instantly when skill value changes
    skillRow.querySelector('.skill-name').addEventListener('input', updateChartFromInputs);
    skillRow.querySelector('.skill-value').addEventListener('input', updateChartFromInputs);
}

// Attach event listener to add skill button
addSkillBtn.addEventListener('click', (e) => {
    e.preventDefault();
    addSkillInput(); // Add a new empty skill row
});


// Call this function when exiting edit mode to update chart from current inputs
function updateChartFromInputs() {
  const labels = [];
  const values = [];
  skillsEditSection.querySelectorAll('.flex.space-x-2').forEach(skillRow => {
    const nameInput = skillRow.querySelector('.skill-name');
    const valueInput = skillRow.querySelector('.skill-value');
    if (nameInput && nameInput.value.trim() && valueInput) {
      labels.push(nameInput.value.trim());
      values.push(Number(valueInput.value) || 0);
    }
  });
  updateSkillsChart(labels, values);
}


// --- Agenda & Chatbot (Existing Functions - no changes needed, just keeping them for context) ---
const eventos = {
  "2025-01-15": [
    {
      titulo: "In√≠cio do Semestre",
      descricao:
        "Aulas do primeiro semestre come√ßam √†s 08h00 em todos os campi da UEG. Apresenta√ß√£o dos professores e entrega de cronogramas. T√©rmino √†s 17h00.",
    },
  ],
  "2025-01-25": [
    {
      titulo: "Integra√ß√£o dos Calouros",
      descricao:
        "Atividades de recep√ß√£o aos novos alunos das 17h00 √†s 19h00 com m√∫sica ao vivo, coffee break e visita guiada pelo campus.",
    },
  ],
  "2025-02-20": [
    {
      titulo: "Workshop de Tecnologia",
      descricao:
        "Evento com especialistas em TI das 14h00 √†s 18h00 no audit√≥rio central. Ser√£o abordados temas como ciberseguran√ßa, intelig√™ncia artificial e mercado de trabalho.",
    },
  ],
  "2025-02-28": [
    {
      titulo: "Oficina de Curr√≠culo e LinkedIn",
      descricao:
        "A oficina ser√° das 10h00 √†s 12h00 na sala 204, bloco B. Ajuda pr√°tica para montar curr√≠culo e perfil profissional.",
    },
  ],
  "2025-03-10": [
    {
      titulo: "Palestra de Carreira",
      descricao:
        "Das 09h30 √†s 11h00, no audit√≥rio 2, com a presen√ßa de ex-alunos bem-sucedidos que compartilhar√£o suas trajet√≥rias profissionais.",
    },
  ],
  "2025-03-22": [
    {
      titulo: "Rodada de Mentorias",
      descricao:
        "Mentores convidados oferecer√£o orienta√ß√µes individuais sobre carreira e projetos acad√™micos, das 13h00 √†s 16h00, sala 305.",
    },
  ],
  "2025-04-05": [
    {
      titulo: "Abertura da Semana Cultural",
      descricao:
        "Cerim√¥nia de abertura √†s 08h00 com apresenta√ß√µes musicais e art√≠sticas. A semana segue at√© 11/04 com programa√ß√£o diversa.",
    },
  ],
  "2025-04-09": [
    {
      titulo: "Exposi√ß√£o de Arte Estudantil",
      descricao:
        "Mostra permanente na biblioteca, das 09h00 √†s 19h00, com trabalhos de alunos da √°rea de artes visuais.",
    },
  ],
  "2025-05-18": [
    {
      titulo: "Feira de Est√°gios",
      descricao:
        "Evento das 13h00 √†s 17h00 com empresas oferecendo est√°gios nas √°reas de tecnologia, educa√ß√£o e sa√∫de. Levar curr√≠culo impresso.",
    },
  ],
  "2025-05-22": [
    {
      titulo: "Palestra: Mercado de Trabalho em 2025",
      descricao:
        "Com especialistas em RH, √†s 10h00 no audit√≥rio 1. Discuss√£o sobre as tend√™ncias e demandas do mercado.",
    },
  ],
  "2025-06-12": [
    {
      titulo: "Provas Finais de Est√°gio",
      descricao:
        "Aplica√ß√£o das provas finais dos est√°gios curriculares obrigat√≥rios. In√≠cio √†s 08h00 e t√©rmino previsto para 12h00, conforme turma.",
    },
  ],
  "2025-06-20": [
    {
      titulo: "Revis√£o de Relat√≥rios de Est√°gio",
      descricao:
        "Encontro com orientadores √†s 14h00 na sala 112 para revis√£o dos relat√≥rios finais antes da entrega.",
    },
  ],
  "2025-07-04": [
    {
      titulo: "In√≠cio das Inscri√ß√µes para Est√°gio em TI",
      descricao:
        "Abertura √†s 00h00 do formul√°rio online. As inscri√ß√µes v√£o at√© 20/07. Est√°gio para alunos do 5¬∫ ao 8¬∫ per√≠odo de cursos de tecnologia.",
    },
  ],
  "2025-07-15": [
    {
      titulo: "Capacita√ß√£o em Soft Skills",
      descricao:
        "Minicurso online gratuito com dura√ß√£o de 3 dias, come√ßando em 15/07. Inscri√ß√£o via site da UEG.",
    },
  ],
  "2025-08-10": [
    {
      titulo: "Feira Cient√≠fica da UEG",
      descricao:
        "Das 08h00 √†s 18h00 no p√°tio central. Estudantes apresentar√£o projetos e experimentos nas √°reas de ci√™ncia e tecnologia.",
    },
  ],
  "2025-08-14": [
    {
      titulo: "Processos Seletivos do SENAC",
      descricao:
        "In√≠cio das inscri√ß√µes para cursos t√©cnicos presenciais e EAD do SENAC. Processo seletivo vai at√© 31/08. Inscreva-se pelo site oficial.",
    },
  ],
  "2025-08-23": [
    {
      titulo: "Encerramento das Inscri√ß√µes - Country 2025",
      descricao:
        "Prazo final para se inscrever no programa de interc√¢mbio cultural Country 2025. Inscri√ß√µes encerram √†s 23h59.",
    },
  ],
  "2025-09-30": [
    {
      titulo: "Premia√ß√£o do Concurso Liter√°rio",
      descricao:
        "Cerim√¥nia √†s 19h00 no Teatro da UEG. Os tr√™s melhores textos ser√£o lidos e premiados com bolsas de estudo e kits de livros.",
    },
  ],
  "2025-09-12": [
    {
      titulo: "Bate-papo com Autores",
      descricao:
        "Roda de conversa com autores goianos na biblioteca central √†s 10h00. Aberto ao p√∫blico.",
    },
  ],
  "2025-10-31": [
    {
      titulo: "Tecnologia na UEG - Halloween Edi√ß√£o",
      descricao:
        "Das 18h00 √†s 22h00, evento tem√°tico com exposi√ß√£o de projetos de tecnologia. Concurso de fantasias tecnol√≥gicas com premia√ß√µes.",
    },
  ],
  "2025-10-20": [
    {
      titulo: "Maratona de Programa√ß√£o",
      descricao:
        "Competi√ß√£o de programa√ß√£o em duplas, das 14h00 √†s 17h00, na sala de inform√°tica 01. Premia√ß√£o no final do evento.",
    },
  ],
  "2025-11-20": [
    {
      titulo: "Mostra de Projetos Interdisciplinares",
      descricao:
        "Apresenta√ß√µes de TCCs e trabalhos integradores das 08h00 √†s 17h00. Banca avaliadora presente. Aberto ao p√∫blico.",
    },
  ],
  "2025-11-27": [
    {
      titulo: "Simp√≥sio de Pesquisa Acad√™mica",
      descricao:
        "Das 09h00 √†s 18h00. Palestras, apresenta√ß√µes de artigos e mesas-redondas. Submiss√µes at√© 10/11.",
    },
  ],
  "2025-12-15": [
    {
      titulo: "Processos Seletivos da UEFG",
      descricao:
        "In√≠cio das inscri√ß√µes para cursos de gradua√ß√£o. Processo seletivo via an√°lise de hist√≥rico escolar. Vai at√© 10/01/2026.",
    },
  ],
  "2025-12-18": [
    {
      titulo: "Live de Orienta√ß√µes Acad√™micas",
      descricao:
        "Transmiss√£o √†s 19h00 com dicas sobre documenta√ß√£o e entrevistas do processo seletivo UEFG. Link ser√° enviado por e-mail aos inscritos.",
    },
  ],
};

// --- Agenda Initialization after DOM loaded ---
window.addEventListener("DOMContentLoaded", () => {
    // Call fetchProfileData to load user profile from backend
    fetchProfileData();

    const tituloMes = document.getElementById("titulo-mes");
    const gradeDias = document.getElementById("grade-dias");
    const dataSelecionadaEl = document.getElementById("data-selecionada");
    const notaDia = document.getElementById("nota-dia");
    const urgentTextarea = document.getElementById("urgent-textarea");
    const notesTextarea = document.getElementById("notes-textarea");
    const listaTodo = document.getElementById("lista-todo");
    const btnAddTarefa = document.getElementById("btn-add-tarefa");
    const salvarNotaBtn = document.getElementById("salvar-nota");
    const statusNota = document.getElementById("status-nota");
    const containerAgenda = document.getElementById("container-agenda");
    const btnFecharAgenda = document.getElementById("btn-fechar-agenda");
    const eventosDoDiaDiv = document.getElementById("eventos-do-dia");
    const btnApagarNota = document.getElementById("btn-apagar-nota");
    const detalheEl = document.getElementById("evento-detalhado");
    const detalheConteudo = document.getElementById("evento-detalhado-conteudo");

    // Close agenda on X button click
    btnFecharAgenda.addEventListener("click", (e) => {
        e.stopPropagation();
        containerAgenda.classList.add("agenda-fechada");
    });

    let hoje = new Date();
    let mesAtual = hoje.getMonth();
    let anoAtual = hoje.getFullYear();
    let diaSelecionado = null;
    let tarefas = [];

    function formatDateKey(date) {
        return date.toISOString().split("T")[0];
    }

    function renderTituloMes() {
        const meses = [
            "Janeiro", "Fevereiro", "Mar√ßo", "Abril", "Maio", "Junho",
            "Julho", "Agosto", "Setembro", "Outubro", "Novembro", "Dezembro",
        ];
        tituloMes.textContent = `${meses[mesAtual]} ${anoAtual}`;
    }

    function hasSavedData(dateKey) {
        return localStorage.getItem(dateKey) !== null;
    }

    function gerarDias() {
        gradeDias.innerHTML = "";
        const primeiroDia = new Date(anoAtual, mesAtual, 1).getDay();
        const diasNoMes = new Date(anoAtual, mesAtual + 1, 0).getDate();

        for (let i = 0; i < primeiroDia; i++) {
            const vazio = document.createElement("div");
            vazio.classList.add("dia");
            gradeDias.appendChild(vazio);
        }

        for (let i = 1; i <= diasNoMes; i++) {
            const dia = document.createElement("div");
            dia.textContent = i;
            dia.classList.add("dia");
            dia.style.cursor = "pointer";

            if (diaSelecionado === i) dia.classList.add("destaque");

            const dataKey = `${anoAtual}-${String(mesAtual + 1).padStart(2, "0")}-${String(i).padStart(2, "0")}`;

            if (eventos[dataKey]) {
                dia.classList.add("dia-evento");
                dia.title = eventos[dataKey].map((ev) => ev.titulo).join(", ");
            }

            if (hasSavedData(dataKey)) dia.classList.add("dia-salvo");

            dia.addEventListener("click", () => {
                diaSelecionado = i;
                carregarDadosDoDia();
                gerarDias();
                containerAgenda.classList.remove("agenda-fechada");
            });

            gradeDias.appendChild(dia);
        }
    }

    function renderListaTarefas() {
        listaTodo.innerHTML = "";
        tarefas.forEach((tarefa, index) => {
            const li = document.createElement("li");
            li.classList.add("lista-check-li");
            const checkbox = document.createElement("input");
            checkbox.type = "checkbox";
            const span = document.createElement("span");
            span.textContent = tarefa;
            span.addEventListener("click", () => {
                tarefas.splice(index, 1);
                renderListaTarefas();
            });
            li.appendChild(checkbox);
            li.appendChild(span);
            listaTodo.appendChild(li);
        });
    }

    function carregarDadosDoDia() {
        if (!diaSelecionado) return;

        const key = formatDateKey(new Date(anoAtual, mesAtual, diaSelecionado));
        dataSelecionadaEl.textContent = `Anota√ß√µes para: ${key}`;

        // Exibir descri√ß√µes no bal√£o lateral
        const eventosDoDia = eventos[key] || [];
        if (eventosDoDia.length > 0) {
            detalheConteudo.innerHTML = "";
            eventosDoDia.forEach((evento) => {
                const descricao = document.createElement("div");
                descricao.textContent = evento.descricao;
                descricao.classList.add("evento-expandido-desc");
                detalheConteudo.appendChild(descricao);
            });
            detalheEl.classList.remove("hidden");

            // ‚è±Ô∏è Auto-close after 15 seconds
            setTimeout(() => {
                detalheEl.classList.add("hidden");
            }, 15000);
        } else {
            detalheEl.classList.add("hidden");
        }

        const saved = localStorage.getItem(key);
        if (saved) {
            const data = JSON.parse(saved);
            notaDia.value = data.nota || "";
            urgentTextarea.value = data.urgent || "";
            notesTextarea.value = data.notes || "";
            tarefas = data.tarefas || [];
        } else {
            notaDia.value = urgentTextarea.value = notesTextarea.value = "";
            tarefas = [];
        }

        renderListaTarefas();
    }

    btnAddTarefa.addEventListener("click", () => {
        const nova = prompt("Digite a nova tarefa:");
        if (nova) {
            tarefas.push(nova);
            renderListaTarefas();
        }
    });

    salvarNotaBtn.addEventListener("click", () => {
        if (!diaSelecionado) return showAlert("Selecione um dia primeiro."); // Use custom alert
        const key = formatDateKey(new Date(anoAtual, mesAtual, diaSelecionado));
        localStorage.setItem(
            key,
            JSON.stringify({
                nota: notaDia.value,
                urgent: urgentTextarea.value,
                notes: notesTextarea.value,
                tarefas: tarefas,
            })
        );
        mostrarNotificacao("Nota salva com sucesso! ‚úÖ"); // Use custom notification
        gerarDias();
    });

    btnApagarNota.addEventListener("click", () => {
        if (!diaSelecionado) return showAlert("Selecione um dia primeiro."); // Use custom alert
        const key = formatDateKey(new Date(anoAtual, mesAtual, diaSelecionado));
        if (confirm("Tem certeza que deseja apagar tudo?")) {
            localStorage.removeItem(key);
            notaDia.value = urgentTextarea.value = notesTextarea.value = "";
            tarefas = [];
            renderListaTarefas();
            mostrarNotificacao("Notas apagadas! ‚ùå"); // Use custom notification
            gerarDias();
        }
    });

    document.getElementById("btn-anterior").addEventListener("click", () => {
        mesAtual--;
        if (mesAtual < 0) {
            mesAtual = 11;
            anoAtual--;
        }
        diaSelecionado = null;
        renderTituloMes();
        gerarDias();
    });

    document.getElementById("btn-proximo").addEventListener("click", () => {
        mesAtual++;
        if (mesAtual > 11) {
            mesAtual = 0;
            anoAtual++;
        }
        diaSelecionado = null;
        renderTituloMes();
        gerarDias();
    });

    renderTituloMes();
    gerarDias();
});


// --- Motivational Phrase & Chatbot (Existing Functions) ---
const phrases = [
  "Oi sou o mascote da BTA, me chamo Geni de Genius para representar n√≥s dois",
  "Que bom te ver denovo, j√° √© de casa n√©",
  "Fique de olho nas novidades!",
  "J√° viu os novos eventos por ai? tudo nota 10!",
  "Dando uma olhada por ai n√©, s√≥ tem qualidade massa aqui!",
  "Cada vez mais perto do sucesso!",
  "Nunca desista de ir mais longe!",
  "Voc√™ est√° indo muito bem!",
  "Continue se esfor√ßando!",
  "Cada passo conta!",
  "Seu talento √© √∫nico!",
  "Acredite no seu potencial!",
];
const phraseEl = document.getElementById("motivational-phrase");
let phraseIndex = 0;
function showPhrase() {
  phraseEl.textContent = phrases[phraseIndex];
  phraseEl.classList.add("show");
  setTimeout(() => {
    phraseEl.classList.remove("show");
    phraseIndex = (phraseIndex + 1) % phrases.length;
    setTimeout(showPhrase, 1000);
  }, 9000);
}
showPhrase();

document.getElementById("chat-botao").addEventListener("click", () => {
  const chat = document.getElementById("chat-box");
  chat.style.display = chat.style.display === "block" ? "none" : "block";
});
const chatBox = document.getElementById("chat-box");
const chatMensagens = document.getElementById("chat-mensagens");
const chatInput = document.getElementById("chat-input");
const chatTarget = document.getElementById("chat-target");
chatTarget.addEventListener("change", () => {
  chatMensagens.innerHTML = "";
});

const respostasMascote = [
  "Ol√°!Estou aqui para ajudar!",
  "Voc√™ j√° conferiu suas habilidades?",
  "Vamos encontrar a melhor vaga para voc√™.",
  "Se n√£o conseguimos resolver entre diretamente em contato com a equipe de suporte (...)!",
];

chatInput.addEventListener("keypress", (e) => {
  if (e.key === "Enter") {
    const msg = chatInput.value.trim();
    if (!msg) return;
    const destino = chatTarget.value;

    chatMensagens.innerHTML += `<div><strong>Voc√™:</strong> ${msg}</div>`;

    if (destino === "mascote") {
      const resposta =
        respostasMascote[Math.floor(Math.random() * respostasMascote.length)];
      setTimeout(() => {
        chatMensagens.innerHTML += `<div><strong>Mascote:</strong> ${resposta}</div>`;
        chatMensagens.scrollTop = chatMensagens.scrollHeight;
      }, 1000);
    } else {
      setTimeout(() => {
        chatMensagens.innerHTML += `<div><strong>${destino}:</strong> (resposta simulada)</div>`;
        chatMensagens.scrollTop = chatMensagens.scrollHeight;
      }, 1000);
    }

    chatInput.value = "";
    chatMensagens.scrollTop = chatMensagens.scrollHeight;
  }
});

// Custom Notification Function (from login.js)
function mostrarNotificacao(mensagem, duracao = 4000) {
  const container = document.getElementById("notificacoes-container");
  const notif = document.createElement("div");
  notif.className = "notificacao";
  notif.textContent = mensagem;
  container.appendChild(notif);

  setTimeout(() => notif.classList.add("show"), 50);

  setTimeout(() => {
    notif.classList.remove("show");
    setTimeout(() => notif.remove(), 500);
  }, duracao);
}

window.addEventListener("load", () => {
  const vagas = document.querySelectorAll("#vagas-lista input");
  vagas.forEach((vaga, index) => {
    setTimeout(() => {
      mostrarNotificacao(vaga.value);
    }, index * 1500);
  });
});

function toggleTheme() {
  const html = document.documentElement;
  const isDark = html.getAttribute("data-theme") === "dark";
  html.setAttribute("data-theme", isDark ? "light" : "dark");
}

// Helper to add a dynamic list item from prompt
function addListItemFromPrompt(listContainer, itemClassName = '') {
    const itemText = prompt("Adicionar novo item:");
    if (itemText) {
        const wrapperTag = (listContainer.tagName === 'UL' || listContainer.tagName === 'OL') ? 'li' : 'div';
        const wrapper = document.createElement(wrapperTag);

        const contentEl = document.createElement('input'); // Always create an input when adding via prompt
        contentEl.type = 'text';
        contentEl.value = itemText;
        contentEl.readOnly = false;
        contentEl.className = 'w-full p-1 border border-blue-500 rounded mb-1'; // Editable style
        if (itemClassName) {
            contentEl.className += ' ' + itemClassName;
        }
        contentEl.setAttribute('data-editable-list-input', 'true'); // Mark as editable list input

        const deleteBtn = document.createElement('button');
        deleteBtn.textContent = 'X';
        deleteBtn.className = 'ml-2 text-red-500 hover:text-red-700 text-sm';
        deleteBtn.type = 'button'; // Prevent form submission
        deleteBtn.onclick = (e) => { e.preventDefault(); wrapper.remove(); };

        wrapper.appendChild(contentEl);
        wrapper.appendChild(deleteBtn);
        listContainer.appendChild(wrapper);

        contentEl.focus(); // Focus on the newly added input
    }
}

// Add event listeners for dynamic add buttons
addFormacaoBtn.addEventListener('click', (e) => { e.preventDefault(); addListItemFromPrompt(formacaoAcademicaList, 'w-full border-b border-transparent focus:border-blue-500'); });
addExperienciaBtn.addEventListener('click', (e) => { e.preventDefault(); addListItemFromPrompt(experienciaProfissionalList, 'w-full border-b border-transparent focus:border-blue-500'); });
addAreaInteresseBtn.addEventListener('click', (e) => { e.preventDefault(); addListItemFromPrompt(areasInteresseList, 'px-3 py-1 bg-gray-100 rounded-full'); });
addIdiomaBtn.addEventListener('click', (e) => { e.preventDefault(); addListItemFromPrompt(idiomasList, 'bg-gray-100 p-2 rounded mb-3 block'); });
addParticipacaoBtn.addEventListener('click', (e) => { e.preventDefault(); addListItemFromPrompt(participacoesList, 'bg-gray-100 p-2 rounded mb-3 block'); });
addProjetoBtn.addEventListener('click', (e) => { e.preventDefault(); addListItemFromPrompt(projetosDestacadosList, 'bg-gray-100 p-2 rounded'); });

// Initial call to fetch profile data when the page loads
document.addEventListener("DOMContentLoaded", fetchProfileData);